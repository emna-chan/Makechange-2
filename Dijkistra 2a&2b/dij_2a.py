# -*- coding: utf-8 -*-
"""dij_2a.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16XcW16cIYLgyrrwiqgMNlXKlx4JV9z_A
"""

import heapq

def dijkstra(graph, start):
    # Initialize distances and predecessors
    distances = {node: float('infinity') for node in graph}
    distances[start] = 0
    priority_queue = [(0, start)]
    visited = set()

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        if current_node in visited:
            continue

        visited.add(current_node)

        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return sorted(distances, key=distances.get)

# Define the graph
graph = {
    0: {5: 1, 7: 1},
    5: {0: 1, 7: 1, 1: 1},
    7: {0: 1, 5: 1, 3: 1, 1: 1, 4: 1},
    1: {5: 1, 7: 1},
    3: {7: 1},
    4: {7: 1}
}

# Call the function and print the result
start_node = 0
print(dijkstra(graph, start_node))